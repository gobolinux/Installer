#!/usr/bin/python3
# -*- coding: iso-8859-1 -*-
#
# *** GOBOLINUX GRAPHICAL/CONSOLE INSTALLER ***
#
# - Andre Detsch {detsch gobolinux.org}
#   (Astract API, pt_BR text, Qt API Implementation, gobolinux wizard & installation code)
#
#
# - Hisham H. Muhammad {lode gobolinux.org}
#   (Abstract API, en_US text, Curses API implementation)
#
#

import sys, os, re, string, os.path, glob
from subprocess import *
from wizard import *
from sys import *
import crypt
import locale
import shutil

# ConfigTools modules
import MouseInfo
import GenLiloConf

sys.path = ['GraphicalTail'] + sys.path

# Approximate size (in kb) from /System (88Mb) and /Data (6Mb)
system_plus_data_sum = 100000
shared = "/System/Index/share/Installer/"

class Platform :
	def __init__(self) :
		self.efi = os.path.exists("/sys/firmware/efi/efivars")
		if os.getenv("FORCE_MBR_INSTALL") is not None :
			self.efi = False

	def pureEFI(self) :
		return self.efi


class DiskUtility :
	def __init__(self, logger=None, reallyInstall=True) :
		self.logger = logger
		self.reallyInstall = reallyInstall

	def isDisk(self, device) :
		ret = True
		try :
			f = open('/sys/block/%s/device/model' %device)
			data = f.readline()
			if data.lower().find('dvd-rom') >= 0 or data.lower.find('cd-rom') >= 0 :
				ret = False
			f.close()
		except :
			pass
		return ret

	def getDevicesList(self) :
		# Prepare the partition label to be shown next to each device path
		names = safeRun("partinfo --name")
		types = safeRun("partinfo --fstype")
		flags = safeRun("partinfo --flags")
		devicesNames = dict((os.path.basename(x.split(":")[0]), x.split(":")[1]) for x in names)
		devicesTypes = dict((os.path.basename(x.split(":")[0]), x.split(":")[1]) for x in types)
		devicesFlags = dict((os.path.basename(x.split(":")[0]), x.split(":")[1]) for x in flags)
		for key in list(devicesNames.keys()):
			if len(devicesNames[key]) == 0 and key in devicesTypes:
				devicesNames[key] = devicesTypes[key]
			if len(devicesNames[key]) == 0 and key in devicesFlags:
				if devicesFlags[key].find("bios_grub") >= 0:
					devicesNames[key] = "BIOS boot partition"

		devicesList = open('/proc/partitions').readlines()[2:]
		temp = []
		devicesSizes = {}
		for device in devicesList :
			l = device.split()
			size = int(l[2])
			if size > system_plus_data_sum :
				name = l[3]
				if not os.path.exists('/dev/%s' %name) :
					continue
				elif not self.isDisk(name) :
					continue
				if size > 1024*1024 :
					c = name + ' (%0.1fGB'%(size/(1024*1024.0))
				else :
					c = name + ' (%0.1fMB'%(size/1024.0)
				if name in devicesNames and len(devicesNames[name]) :
					c += ' - ' + devicesNames[name]
				c += ')'
				temp.append(c)
				devicesSizes[name] = size
		devicesList = temp

		p = re.compile(r'\b[a-z]+[0-9]+\b')
		pmmcblk = re.compile(r'\b[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[0-9]+[a-z]+[0-9]+\b')
		pnvme = re.compile(r'\b[a-z]+[0-9]+[a-z]+[0-9]+p[0-9]+\b')
		partitionsList = [x for x in devicesList if p.match(x) and not 'loop' in x]
		partitionsList += [x for x in devicesList if pmmcblk.match(x) and not 'loop' in x]
		partitionsList += [x for x in devicesList if pnvme.match(x) and not 'loop' in x]
		partitionsList.sort()

		d = re.compile(r'\b[a-z]+\b')
		dmmcblk = re.compile(r'\b[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[a-z]+[0-9]+\b')
		dnvme = re.compile(r'\b[a-z]+[0-9]+[a-z]+[0-9]+\b')
		discsList = [x for x in devicesList if d.match(x) and not 'loop' in x]
		discsList += [x for x in devicesList if dmmcblk.match(x) and not 'loop' in x]
		discsList += [x for x in devicesList if dnvme.match(x) and not 'loop' in x]
		discsList.sort()

		return discsList, partitionsList, devicesSizes

	def getEFIPartitionsList(self, disk=None) :
		cmd = "partinfo --flags"
		if disk is not None :
		    cmd += " " + disk
		return [ x.split(":")[0] for x in safeRun(cmd) if x.find("boot") >= 0 and x.find("esp") >= 0 ]

	def getPartitionUUID(self, partition) :
		try :
			lines = safeRun('blkid /dev/%s' %partition)
			line = [ x for x in lines if x.find('PARTUUID=') >= 0 ][0]
			partuuid = [ x.split('=')[1].replace('"', '').replace('\n','') for x in line.split() if x.find('PARTUUID') == 0 ]
			return partuuid[0]
		except :
			return ''

	def getFilesystemUUID(self, partition) :
		for entry in glob.glob("/dev/disk/by-uuid/*") :
			target = os.readlink(entry)
			if os.path.basename(target) == partition :
				return os.path.basename(entry)
		return ''
	
	def __refreshUUID(self, partition) :
		target = self.getFilesystemUUID(partition)
		if len(target) :
			os.unlink("/dev/disk/by-uuid/%s" %target)
		cmd = 'udevadm trigger'
		safeRun(cmd, '', 0, self.logger)
		cmd = 'udevadm settle'
		safeRun(cmd, '', 0, self.logger)
	
	def formatPartition(self, partition, fileSystem) :
		if fileSystem == 'ReiserFS' :
			#yes, two '-f's needed
			cmd = 'mkreiserfs -f -f /dev/%s'%partition
		
		elif fileSystem == 'Ext4' :
			cmd = 'mkfs.ext4 -j /dev/%s'%partition

		elif fileSystem == 'Ext3' :
			cmd = 'mkfs.ext3 -j /dev/%s'%partition

		elif fileSystem == 'Ext2' :
			cmd = 'mkfs.ext2 /dev/%s'%partition

		elif fileSystem == 'XFS' :
			cmd = 'mkfs.xfs -f -q /dev/%s'%partition

		elif fileSystem == 'FAT32' :
			cmd = 'mkfs.fat -F 32 /dev/%s'%partition

		else :
			print('Unkown FS type: '+fileSystem)
			return

		safeRun(cmd, '', 0, self.logger)
		if self.reallyInstall :
			self.__refreshUUID(partition)

	def bindMountTable(self, dest):
		return {
			dest+'/proc': '/proc',
			dest+'/sys':  '/sys',
			dest+'/dev':  '/dev',
			dest+'/System/Kernel/Status':  '/proc',
			dest+'/System/Kernel/Objects': '/sys',
			dest+'/System/Kernel/Devices': '/dev',
		}

	def bindMount(self, src, dest) :
		cmd = 'mount -o rbind %s %s' %(src, dest)
		safeRun(cmd, 'Binding ' + src, 0, self.logger)

	def mountPseudoFS(self, destMountPoint) :
		for dest, src in self.bindMountTable(destMountPoint).items():
			self.bindMount(src, dest)

	def unmountPseudoFS(self, destMountPoint) :
		for dest, src in self.bindMountTable(destMountPoint).items():
			cmd = 'umount --recursive %s' %dest
			safeRun(cmd, 'Unbinding ' + src, 0, self.logger)

	def mount(self, partition, destMountPoint) :
		if not os.path.exists(destMountPoint) :
			os.makedirs(destMountPoint)
		cmd = 'mount /dev/%s %s'%(partition, destMountPoint)
		safeRun(cmd, 'Mounting root partition', 0, self.logger)

	def unmount(self, partition, destMountPoint) :
		#log(tr('Unmounting selected root partition %s...' %partition))
		safeRun('umount ' + destMountPoint)


class BootLoader :
	def __init__(self, targetDisc, targetPartition, destMountPoint, logger, reallyInstall) :
		self.targetDisc = targetDisc
		self.targetPartition = targetPartition
		self.destMountPoint = destMountPoint
		self.logger = logger
		self.reallyInstall = reallyInstall
		self.devroot = os.readlink("/dev/root") if os.path.exists("/dev/root") else None
		self.diskutil = DiskUtility(self.logger, self.reallyInstall)

	def __fixDevRoot(self) :
		if not self.reallyInstall :
			return

		# Required to fix issues with grub-mkconfig
		if self.devroot:
			os.unlink("/dev/root")
		os.symlink(self.targetPartition, "/dev/root")

		if not os.path.exists(self.destMountPoint+"/etc/mtab") :
			shutil.copy("/proc/mounts", self.destMountPoint+"/etc/mtab")

		# Grub cannot handle /S/K/Devices
		shutil.copy(self.destMountPoint+"/etc/mtab", self.destMountPoint+"/etc/mtab.orig")
		newmtab = open(self.destMountPoint+"/etc/mtab").read().replace("/System/Kernel/Devices", "/dev")

		# Force unlink just in case mtab is a symlink to /proc/mounts
		os.unlink(self.destMountPoint+"/etc/mtab")
		f = open(self.destMountPoint+"/etc/mtab", "w")
		f.write(newmtab)
		f.close()

	def __rollbackDevRoot(self) :
		if not self.reallyInstall :
			return

		# Rollback modifications to /dev/root and /etc/mtab
		os.unlink("/dev/root")
		if self.devroot:
			os.symlink(self.devroot, "/dev/root")
		shutil.move(self.destMountPoint+"/etc/mtab.orig", self.destMountPoint+"/etc/mtab")

	def installGrub(self) :
		self.__fixDevRoot()
		grub_modules = 'normal part_gpt part_msdos multiboot biosdisk nativedisk fat'
		grub_cmd = 'grub-install --no-floppy --modules="%s" /dev/%s' %(grub_modules, self.targetDisc)
		cmd = 'chroot %s %s' %(self.destMountPoint, grub_cmd)
		safeRun(cmd, 'grub-install', 1, self.logger)
		self.__rollbackDevRoot()

	def createGrubConfig(self, grubdir) :
		if len(grubdir) :
			self.__fixDevRoot()
			cmd = 'chroot %s GenGrubConf %s' %(self.destMountPoint, grubdir)
			safeRun(cmd, 'Running GenGrubConf', 0, self.logger)
			self.__rollbackDevRoot()
		return True

	def installLilo(self) :
		pass

	def createLiloConfig(self) :
		lilo_conf = GenLiloConf.generateLiloConfFile(self.targetDisc, self.targetPartition)
		os.mkdir(self.destMountPoint + '/Programs/LILO/Settings')
		safeWriteToFile(self.destMountPoint + '/Programs/LILO/Settings/lilo.conf', lilo_conf, self.logger)

	def createEFIConfig(self, grubdir, efimnt) :
		self.__fixDevRoot()

		grub_modules = 'part_gpt part_msdos iso9660 all_video efi_gop efi_uga video_cirrus gfxterm gettext font'
		grub_cmd = 'grub-install '
		grub_cmd += '--target=x86_64-efi '
		grub_cmd += '--no-floppy '
		grub_cmd += '--modules="%s" ' %(grub_modules)
		grub_cmd += '--efi-directory=%s ' %(efimnt)
		grub_cmd += '--boot-directory=%s ' %(grubdir)
		grub_cmd += '--bootloader-id=GRUB '

		cmd = 'chroot %s %s' %(self.destMountPoint, grub_cmd)
		safeRun(cmd, 'grub-install', 1, self.logger)

		self.__rollbackDevRoot()

###############################################################################
#               CHOOSING DISPLAY MODE
###############################################################################

if ('qt' in sys.argv) :
    mode = 'qt'
elif ('curses' in sys.argv) :
    mode = 'curses'
else :
	if "DISPLAY" in os.environ :
		mode = 'qt'
	else :
		mode = 'curses'

try:
	if mode == 'qt' :
		from qtwizard import *
		Wizard = AbsQtWizard
		Screen = AbsQtScreen
		#QToolTip.setWakeUpDelay(200)
except:
	mode = 'curses'

if mode == 'curses' :
	from cwizard import *
	Wizard = AbsCursesWizard
	Screen = AbsCursesScreen
elif mode == 'qt' :
	pass
else :
	print('Undefined mode:',mode)
	sys.exit(1)

settable_root_name = (os.getenv("GOBO_LIVES") == "somewhere in time")

###############################################################################
#               INSTALL OR DEBUG
###############################################################################

reallyInstall = ('install' in sys.argv)

###############################################################################
#               LOCALE-DEPENDENT INFO
###############################################################################

if 'LANG' in os.environ :
	lang = os.environ['LANG'].split('.')[0].split('@')[0]
else :
	lang = 'en_US'

consoleFont = '/System/Index/share/consolefonts/lode-2.0-lat1u-16.psfu.gz'
defaultZone = ''

# Configure known locale settings
if lang == 'pt_BR' :
	defaultZone = 'America/Sao_Paulo'
elif lang == 'hu_HU' :
	consoleFont = '/Programs/KBD/Settings/kbd/consolefonts/lat2-16.psfu.gz'
	defaultZone = 'Europe/Budapest'

###############################################################################
#               GENERAL FUNCTIONS
###############################################################################

def safeRun(cmd, context = '', showProgress = 0, logger = None, altEnv=None) :
	l = []
	try :
		if reallyInstall :
			if altEnv is None :
				altEnv = os.environ.copy()
			#(i,oe) = os.popen4(cmd)
			p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True, env=altEnv)
			(i, oe) = (p.stdin, p.stdout)
			while 1 :
				line = oe.readline().decode("utf-8")
				if not line :
					break
				if logger :
					logger.append(line)
				if showProgress :
					sys.stdout.write("{} ".format(line))
					sys.stdout.flush()
				l.append(line.strip())
			oe.close()
			return l
		else :
			if logger :
				logger.append('===%s===='%context)
				logger.append(cmd)
				logger.append('=======\n')
			if showProgress :
				print('===%s===='%context)
				print(cmd)
				print('=======\n\n')
			return []
	except Exception as inst:
		if logger :
			logger.append('Error running '+cmd)
			logger.append(str(inst))
		print('Error running '+cmd)
		print(str(inst))

###############################################################################

def safeWriteToFile(fileName, s, logger = None) :
	try :
		context = ''
		if reallyInstall and os.access(os.path.dirname(fileName), os.W_OK) and (not os.access(fileName, os.R_OK) or os.access(fileName, os.W_OK)) :
			f = open(fileName,'w')
			f.write(s)
			f.close()
			return 1
		else :
			if reallyInstall :
				print('Warning: file %s could not be saved.'%fileName)
				if logger :
					logger.append('Warning: file %s could not be saved.'%fileName)
			if not context :
				context = fileName

			if logger :
				logger.append('===%s===='%context)
				logger.append(s)
				logger.append('===========\n\n')

			print('===%s===='%context)
			print(s)
			print('===========\n\n')
			return 0
	except Exception as inst:
		if logger :
			logger.append('Error writing '+fileName)
			logger.append(str(inst))
		print('Error writing '+fileName)
		print(str(inst))


###############################################################################

def safeFileReadLines(fileName, logger = None) :
	try :
		fileUsed = ''

		#if reallyInstall and os.access(fileName, os.F_OK) :
		if os.access(fileName, os.F_OK) :
			fileUsed = fileName

		else :
			fileUsed = shared + 'TestingInputs/'+os.path.basename(fileName)
			if reallyInstall :
				if logger :
					logger.append('Warning: file %s could not be read.'%fileName)
					logger.append('Using %s instead.'%fileUsed)

				print('Warning: file %s could not be read.'%fileName)
				print('Using %s instead.'%fileUsed)

		if os.access(fileUsed, os.F_OK) :
			f = open(fileUsed)
			l = f.readlines()
			f.close()
			l = [x.strip() for x in l]
			return l
		else :
			print('Error: file %s not found.'%fileUsed)
			return []
	except Exception as inst:
		if logger :
			logger.append('Error reading '+fileName)
			logger.append(str(inst))
		print('Error reading '+fileName)
		print(str(inst))



###############################################################################
#               GETTING SOME DATA REQUIRED ON WIZARD
###############################################################################

fullKeymapsList = \
['br-abnt2', 'dvorak', 'us', 'us-acentos',
'ANSI-dvorak', 'azerty', 'be-latin1', 'bg', 'bg-cp1251', 'br-abnt',
'br-abnt2', 'br-latin1-abnt2', 'br-latin1-us', 'by', 'cf', 'croat', 'cz',
'cz-cp1250', 'cz-lat2', 'cz-lat2-prog', 'cz-us-qwertz', 'de', 'de-latin1',
'de-latin1-nodeadkeys', 'de_CH-latin1', 'defkeymap', 'defkeymap_V1.0', 'dk',
'dk-latin1', 'dvorak', 'dvorak-l', 'dvorak-r', 'emacs', 'emacs2', 'es',
'es-cp850', 'et', 'et-nodeadkeys', 'fi', 'fi-latin1', 'fi-latin9', 'fr',
'fr-latin1', 'fr-latin9', 'fr-pc', 'fr_CH', 'fr_CH-latin1', 'gr', 'gr-pc',
'hu', 'hu101', 'il', 'il-heb', 'il-phonetic', 'is-latin1', 'it', 'it-ibm',
'it2', 'jp106', 'la-latin1', 'lt', 'lt.baltic', 'lt.l4', 'mk', 'mk-cp1251',
'mk-utf', 'mk0', 'nl', 'nl2', 'no', 'no-latin1', 'pc110', 'pl', 'pl2',
'pt-latin1', 'pt-latin9', 'ro_win', 'ru', 'ru-cp1251', 'ru-ms', 'ru-yawerty',
'ru1', 'ru2', 'ru3', 'ru4', 'ru_win', 'se-fi-ir209', 'se-fi-lat6', 'se-ir209',
'se-lat6', 'sg', 'sg-latin1', 'sg-latin1-lk450', 'sk-prog-qwerty',
'sk-prog-qwertz', 'sk-qwerty', 'sk-qwertz', 'slovene', 'speakup-jfw',
'speakupmap', 'sr-cy', 'sv-latin1', 'tr_f-latin5', 'tr_q-latin5', 'tralt',
'trf', 'trq', 'ua', 'ua-utf', 'ua-utf-ws', 'ua-ws', 'uk', 'us',
'us-acentos', 'wangbe', 'wangbe2']


###############################################################################

if reallyInstall and os.access('/Data/Variable/tmp/setup/keymap', os.R_OK) :
	defaultKeymap=open('/Data/Variable/tmp/setup/keymap').read().strip()
else :
	defaultKeymap=open(shared+'TestingInputs/keymap').read().strip()

###############################################################################

programDescriptions = {}
lines = safeFileReadLines(shared+'Information/ShortDescriptions.txt')
for line in lines :
	l = line.split('::')
	if len(l) > 1 :
		programName = l[0].strip()
		programDescriptions[programName] = l[1].strip()

###############################################################################

programSizes = {}
programShowSizes = {}
lines = safeFileReadLines(shared+'Information/Programs_du.txt')
for line in lines :
	l = line.split()
	if len(l) > 1 :
		programName = l[1][2:]
		programSizes[programName] = int(l[0])
		programShowSizes[programName] = "%0.1f"%(programSizes[programName] / 1024.0)

###############################################################################

cmd = 'NetInterfaces'
if reallyInstall :
	interfaces = safeRun(cmd)
else :
	interfaces = ['eth3','eth4']

###############################################################################
#               DEFINING TRANSLATOR
###############################################################################

t = AbsTranslator(shared+'Language/tt2_%s.ts'%(lang), lang, mode)

#convenience
def tr(s) :
	return t.tr(s)

###############################################################################

cmd = 'cd /System/Index/share/zoneinfo; find -type f'
locales = os.popen(cmd).readlines()
for i in range(len(locales)) :
	locales[i] = locales[i][2:].strip().replace('_', ' ')
locales.sort()

installer = Wizard('GoboLinux')

discsList, partitionsList, devicesSizes = DiskUtility().getDevicesList()
if not partitionsList :
	msg = tr('No valid partitions found')
	msg = msg + '\n' + tr('Create one using "gparted" or "cfdisk"')
	print(msg)
	installer.showMessageBox(msg, ['Ok'])
	installer.done()
	sys.exit(1)


###############################################################################
#               DEFINING WIZARD SCREENS AND CALLBACKS
###############################################################################


##############################################################################
introduction = Screen(tr('Welcome!'))
f=open(shared+'Language/%s/Introduction'%lang, "rb")
fileContents = f.read().decode(locale.getpreferredencoding())
introduction.addMultiLineEdit('IntroText', tr('Installation process'), fileContents, tr('Read this to learn more about the installation.') )
f.close()
installer.addScreen(introduction)


##############################################################################
def rootPartitionName() :
	return installer.getValue('RootPartition')[1].split()[0]

def rootPartitionName_and_Size() :
	return installer.getValue('RootPartition')[1]

def rootPartitionSizeStr() :
	return installer.getValue('RootPartition')[1].split()[1].split("-")[0].strip()

def rootPartitionSize() :
	return devicesSizes[rootPartitionName()]

def showSelectedSetSize() :
	packages = [x.split()[0] for x in installer.getValue('Packages')[1]]
	sum = system_plus_data_sum
	for package in packages :
		if package in programSizes :
			sum = sum + programSizes[package]
	if sum > (1024 * 1024.0) :
		s = '%0.2f'%(sum / (1024 * 1024.0)) + 'GB'
	else :
		s = '%0.1f'%(sum / (1024.0)) + 'MB'
	targetSize = rootPartitionSize()
	if targetSize > (1024 * 1024.0) :
		formattedTargetSize = '%0.2f'%(targetSize / (1024 * 1024.0)) + 'GB'
	else :
		formattedTargetSize = '%0.1f'%(targetSize / (1024.0)) + 'MB'
	if sum > targetSize :
		percentage = '>100'
	else :
		percentage = '{:.2f}'.format((sum*100)/targetSize)
	installer.setValue('SpaceRequired', tr('Space required: {} ({}% of {})').format(s,percentage,formattedTargetSize))
	return True

platform = Platform()
deviceSelection = Screen(tr('Target device selection'))
deviceSelection.addList('RootPartition', tr('Root partition'), (partitionsList,''), tr('Which partition of your hard drive should the system be copied to?') )

def doFormatChanged() :
	if installer.getValue('DoFormat') :
		warn = tr('Warning, this will destroy all data in')
		msg = "{} {}".format(warn, rootPartitionName_and_Size())
		ret = installer.showMessageBox(msg, ['Ok', 'Cancel'])
		if ret == 'Ok' :
			installer.setEnabled('PartitionType', 1)
		else :
			installer.setValue('DoFormat', 0)
	else :
		installer.setEnabled('PartitionType', 0)

def updateBootloaderTargets() :
	rootDisk = rootPartitionName()
	rootDisk = ''.join(i for i in rootDisk if not i.isdigit())
	bootloaderTargetList = discsList + partitionsList
	bootloaderInstallLabel = "On the MBR of which disk should the bootloader be installed."
	efibootloaderTargetList = DiskUtility().getEFIPartitionsList()

	if platform.pureEFI() and len(efibootloaderTargetList) == 0:
		err = tr('Error: cannot install GoboLinux on an UEFI system without an ESP partition.')
		msg = "{} {}".format(err, tr('Create one using "gparted" or "cfdisk"'))
		installer.showMessageBox(msg, ['Ok'])
		installer.done()
		sys.exit(1)
	elif platform.pureEFI() and len(efibootloaderTargetList):
		if mode != 'curses' :
			print((tr('Proceeding with UEFI installation mode')))
		bootloaderTargetList = efibootloaderTargetList
		bootloaderInstallLabel = " EFI System Partition"
	else:
		if mode != 'curses' :
			print((tr('Proceeding with BIOS/MBR installation mode')))
	try :
		bootloaderTargetList.remove(rootPartitionName_and_Size())
	except ValueError :
		pass
	bootloader.delWidget('BootloaderTarget')
	bootloader.addList('BootloaderTarget', tr('Install at'), (bootloaderTargetList,''), tr(bootloaderInstallLabel) )

def deviceSelectionComplete() :
	updateBootloaderTargets()
	return showSelectedSetSize()

deviceSelection.addBoolean('DoFormat',   tr('Format partition'), 0, tr('Erase all contents of the partition and prepare it to receive the new system?'), doFormatChanged)
deviceSelection.addList('PartitionType', tr('File system'), (['Ext4'], 'Ext4'), tr('Which kind of file system should be used to format the root partition.') )
deviceSelection.setEnabled('PartitionType', 0)
deviceSelection.onValidate(deviceSelectionComplete)

def doSwapFile() :
	if installer.getValue('SwapFile') == 1 :
		deviceSelection.setEnabled('SwapSize', 1)
	else :
		deviceSelection.setEnabled('SwapSize', 0)
	try :
		showSelectedSetSize()
	except :
		# Ignore first run when selected set is not built yet
		pass

deviceSelection.addBoolean('SwapFile', tr('Create a swap file'), 0, tr('Create a special file in the root partition to function as memory swap space'), doSwapFile)
# FIXME: default number should be based on memory size and root partition size
deviceSelection.addLineEdit('SwapSize', tr('Swap file size (in MB)'), str(256), tr('Size of the swap file, in megabytes.'))

installer.addScreen(deviceSelection)

###############################################################################
packageSelection = Screen(tr('Package selection'))

def checkFitPackages() :
	packages = [x.split()[0] for x in installer.getValue('Packages')[1]]
	sum = system_plus_data_sum
	for package in packages :
		if package in programSizes :
			sum = sum + programSizes[package]
	if sum > rootPartitionSize() :
		x = installer.showMessageBox(tr('Selected packages does not fit target partition.\nEither deselect packages or go back and choose another target partition.'), ['Ok'])
		return False
	else :
		return True

def getPackageWithsizeAndDescription(packageName) :
	tr = packageName
	if packageName in programShowSizes :
		tr = tr + ' ('+programShowSizes[packageName]+'MB)'

	if packageName in programDescriptions :
		tr = tr + ' - '+programDescriptions[packageName]
	return tr

def getProfilePackages(profileName) :
	if profileName == 'Full' :
		lines = os.listdir('/Programs')
	else :
		lines = safeFileReadLines(shared+'Profiles/'+profileName)
	lines = list(map(getPackageWithsizeAndDescription, lines))
	lines.sort()
	return lines

profiles = {}
for profileName in ['Base', 'Typical', 'Full'] :
	profiles[profileName] = getProfilePackages(profileName)

def fillUpDependencies() :
	allWithSizes,selectedWithSize = installer.getValue('Packages')
	all = [x.split()[0] for x in allWithSizes]

	for basePackage in profiles['Base'] :
		if not basePackage in selectedWithSize :
			selectedWithSize.append(basePackage)

	selected = [x.split()[0] for x in selectedWithSize]

	for package in selected :
		try :
			f = open("/Programs/%s/Current/Resources/Dependencies"%package)
			lines = f.readlines()
			f.close()
			for line in lines :
				l = line.split()
				if not l :
					continue
				p = l[0].strip()
				if p and not p.startswith('#') :
					if not p in selected and p in all:
						selected.append(p)
		except IOError:
			pass

	newSelectedWithSize = list(map(getPackageWithsizeAndDescription, selected))
	installer.setValue('Packages', (allWithSizes,newSelectedWithSize))
	showSelectedSetSize()

def setProfile() :
	profileNames, profileNameAndSize = installer.getValue('Profile')
	profileName = profileNameAndSize.split()[0]
	p = installer.getValue('Packages')[0]
	installer.setValue('Packages',(p,profiles[profileName]))
	showSelectedSetSize()

#packageSelection.addList('Profile', tr('Predefined sets of packages'), (['Base','Typical','Full'], 'Full'), tr('Selecting one of these will reset the selections of the package list.'), setProfile)
packageSelection.addList('Profile', tr('Predefined sets of packages'), (['Full'], 'Full'), tr('Selecting one of these will reset the selections of the package list.'), setProfile)
packageSelection.addCheckList('Packages', tr('Select packages'), (profiles['Full'],  profiles['Full']), tr('Mark the packages that should be installed in the system.'), showSelectedSetSize)
packageSelection.addLabel('SpaceRequired',tr('Space required: {} (available space: {})').format('1.5GB', rootPartitionSizeStr()), '', tr('Space required to install the selected packages'))
packageSelection.addButton('',tr('Satisfy dependencies'), '', tr('Mark all packages in the list that are needed by the ones already marked.'), fillUpDependencies)
packageSelection.addBoolean('BypassFillUpDependencies', tr('Bypass dependencies check'), 0, tr("Check if you want to install only the above selected packages."))
packageSelection.onValidate(checkFitPackages)
installer.addScreen(packageSelection)
showSelectedSetSize()


##############################################################################
bootloader = Screen(tr('Bootloader options'))

def installBootloaderChanged() :
	installer.setEnabled('BootloaderTarget', installer.getValue('InstallBootloader'))

if platform.pureEFI() :
	bootloader.addBoolean('InstallBootloader', tr('Install bootloader'), 1, tr("Install GRUB application in an existing EFI System Partition."), installBootloaderChanged)
else :
	bootloader.addBoolean('InstallBootloader', tr('Install bootloader'), 1, tr("Install GRUB in the MBR of your hard disk in order to load up the system."), installBootloaderChanged)
#bootloader.addBoolean('EnableGraphicGRUB', tr('Boot GRUB in graphic mode'), 1, tr("Select this if you want a background image to be displayed in the bootloader screen."))
installer.addScreen(bootloader)
#installer.setEnabled('BootloaderTarget',1)


##############################################################################
generalOptions = Screen(tr('General settings'))
generalOptions.addLineEdit('HostName', tr('Host name: '), 'NewMachine', tr('Write in a name to identify this computer in a network environment.') )
generalOptions.addList('KeymapLayout', tr('Keyboard map'), (fullKeymapsList, defaultKeymap), tr('Select the layout type that matches your keyboard.'), None)
generalOptions.addList('BootTheme',    tr('Boot theme'), (['GoboLinux017', 'Progress-IV', 'Hat', 'Slack', 'AppleII', 'CheckList', 'Quotes', 'ScanDisk', 'Progress-II', 'Progress-III', 'SplitScreen'],'GoboLinux017'), tr('The appearance of the boot process can be selected here.') )
generalOptions.addList('ClockMode',    tr('BIOS clock is set in'), (['GMT','Local'], 'GMT'), tr('GMT is the prefered choice, unless your computer dual-boots with Microsoft Windows.') )
installer.addScreen(generalOptions)


##############################################################################
## Locales
##############################################################################

def updateLocaleList() :
	filterString   = installer.getValue('ZoneInfoFilter')
	selectedLocale = installer.getValue('ZoneInfo')[1]
	localesToShow  = [ l for l in locales if l.lower().find(filterString.lower()) > -1 ]
	installer.setValue('ZoneInfo',(localesToShow,selectedLocale))

localeOptions = Screen(tr('Time zone'))
localeOptions.addList('ZoneInfo', tr('Time zone'), (locales,defaultZone), tr('Select the time zone where you are at') )
localeOptions.addLineEdit('ZoneInfoFilter', tr('Filter:'),'',  tr('Narrow the selection by searching for a particular word'), updateLocaleList )

installer.addScreen(localeOptions)


###############################################################################
superUserScreen = Screen(tr('Super-user settings'))

def checkSuperUserPasswords() :
	if installer.getValue('SuperUserPassword') != installer.getValue('SuperUserPasswordRetyped') :
		x = installer.showMessageBox(tr('Passwords typed do not match'), ['Ok'])
		installer.setValue('SuperUserPasswordRetyped', '')
		installer.setValue('SuperUserPassword', '')
		return False
	else :
		if installer.getValue('SuperUserPassword') == '' :
			x = installer.showMessageBox(tr('Password is not allowed to be empty.'), ['Ok'])
			return False
	return True

# Keeping as an Easter Egg, after all that Lucas went through
if settable_root_name:
	superUserScreen.addLineEdit('SuperUserLogin',tr('Login:'),'root', tr('Select the account name for the superuser.') )

superUserScreen.addPassword('SuperUserPassword', tr('Password:'), '', tr('Enter the password for the superuser.') )
superUserScreen.addPassword('SuperUserPasswordRetyped', tr('Retype password:'), '', tr('Enter the same password as above, to verify for typing mistakes.') )
superUserScreen.onValidate(checkSuperUserPasswords)
installer.addScreen(superUserScreen)


##############################################################################
usersScreen = Screen(tr('Additional users'))

addedUsers = {}

def addUser() :
	l,v = installer.getValue('Users')
	newLogin = installer.getValue('NewUserLogin')
	p = re.compile('[a-z_][a-z0-9_-]*[$]?$')
	if not p.match(newLogin) :
		installer.showMessageBox(tr('Invalid username'), ['Ok'])
		installer.setValue('NewUserPasswordRetyped', '')
		installer.setValue('NewUserPassword', '')
		return

	if installer.getValue('NewUserPassword') != installer.getValue('NewUserPasswordRetyped') :
		installer.showMessageBox(tr('Passwords typed do not match'), ['Ok'])
		installer.setValue('NewUserPasswordRetyped', '')
		installer.setValue('NewUserPassword', '')
		return

	if not newLogin or newLogin in list(addedUsers.keys()):
		return
	newUser = {}
	newUser['Password']  = installer.getValue('NewUserPassword')  # obs: existe o parametro '-p' no useradd para passar a senha
	newUser['FullName'] = installer.getValue('NewUserFullName')
	newUser['NewUserEnableSudo'] = installer.getValue('NewUserEnableSudo')
	#newUser['Shell']     = installer.getValue('NewUserShell')
	addedUsers[newLogin] = newUser
	l.append(newLogin)
	installer.setValue('Users',(l,v))

	installer.setValue('NewUserLogin', '')
	installer.setValue('NewUserPassword', '')
	installer.setValue('NewUserPasswordRetyped', '')
	installer.setValue('NewUserFullName', '')
	installer.setValue('NewUserEnableSudo', 0)


def removeUser() :
	l,v = installer.getValue('Users')
	if v in l :
		del addedUsers[v]
		l.remove(v)
	installer.setValue('Users',(l,''))

def checkAddedUsers() :
	userslist,selection = installer.getValue('Users')
	if len(userslist) == 0 :
		answer = installer.showMessageBox(tr('No normal users are added. Do you want to continue anyway?'), ['Yes','No','Info'])
		if answer == 'Yes' :
			return True
		elif answer == 'Info' :
			x = installer.showMessageBox(tr('Your installation will only have a superuser defined.\n It is recommended that one adds at least one additional user for normal use.'), ['Ok'])
			return False
		else :
			return False
	else :
		return True

usersScreen.addLineEdit('NewUserLogin',          tr('Login:'), '', tr('Type here the UNIX login for the user, e.g. "johnd"'))
usersScreen.addPassword('NewUserPassword',       tr('Password:'), '', tr('Enter the password for this user.'))
usersScreen.addPassword('NewUserPasswordRetyped',tr('Retype password:'), '', tr('Enter the same password as above, to verify for typing mistakes.'))
usersScreen.addLineEdit('NewUserFullName',       tr('Full name:'), '', tr('Type here the real name of the user, e.g. "John Doe"'))
#usersScreen.addList    ('NewUserShell',          tr('Default shell'), (['ZSH', 'Bash'], 'ZSH'))
usersScreen.addBoolean ('NewUserEnableSudo',     tr('Enable super-user privileges'), 0, tr("Adds the user to the 'sys' group, enabling it to run all commands as super-user via 'sudo'"))
usersScreen.addButton  ('',                      tr('Add user'), '', tr('Create an user account using the information entered above.'), addUser)
usersScreen.addButton  ('',                      tr('Remove user'), '', tr('Remove the user that is currently selected in the list below.'), removeUser)
usersScreen.addList('Users', tr('Added users'), ([], ''), tr('This is the list of users added so far.'))
usersScreen.onValidate(checkAddedUsers)
installer.addScreen(usersScreen)


##############################################################################
lastScreen = Screen(tr('Ready to install'))
lastScreen.addImage(shared+'Images/que.png')

f=open(shared+'Language/%s/Conclusion'%lang, "rb")
fileContents = f.read().decode(locale.getpreferredencoding())
lastScreen.addMultiLineEdit('',tr('Done'),fileContents, tr('Continuing from here will perform all the indicated actions.'))
f.close()

installer.addScreen(lastScreen)


###############################################################################
#               RUNNING WIZARD
###############################################################################

#installer.showDialog(logger)
ret = installer.start()
if not ret :
	print(tr("GoboLinux installation aborted"))
	exit(1)

###############################################################################
#               WIZARD DONE. BEGIN INSTALLATION
###############################################################################


def _RunInstallation():
	destMountPoint = '/Mount/GoboLinux'

	def log(s) :
		if mode == 'qt' :
			s  = "\033[1;36m" + '=> ' + s + "\033[0m"
		else :
			s  = "\033[36m" + '=> ' + s + "\033[0m"
		if logger :
			logger.append(s)
			#logger.show()

		print(s)
		sys.stdout.flush()

	safeRun('clear')
	safeRun('umount '+destMountPoint+' &> /dev/null')

	############################################################################
	diskutil = DiskUtility(logger, reallyInstall)
	rootPartition = rootPartitionName()
	uuidBeforeMkfs = diskutil.getFilesystemUUID(rootPartition)
	if installer.getValue('DoFormat') :
		log(tr('Formatting root partition %s...') %rootPartitionName_and_Size())
		diskutil.formatPartition(rootPartition, installer.getValue('PartitionType')[1])

	############################################################################
	# Mount partition
	log(tr('Mounting selected root partition %s...')%rootPartition)
	diskutil.mount(rootPartition, destMountPoint)

	############################################################################
	# Check out dependencies
	if not installer.getValue('BypassFillUpDependencies') :
		fillUpDependencies()

	############################################################################
	# Create profile file containing packages to install
	log(tr('Creating temporary profile file...'))

	profiles, profileNameAndSize = installer.getValue('Profile')
	profileName = profileNameAndSize.split()[0]

	def createProfileFile(packageList) :
		o = ''
		for package in packageList :
			o += package + '\n'
		safeWriteToFile('/tmp/'+profileName, o, logger)

	createProfileFile([x.split()[0] for x in installer.getValue('Packages')[1]])

	############################################################################
	# Call ProfileInstall
	log(tr('Performing file installation (may take a few minutes)...'))
	
	# Last remnants of a configurable username
	root_name = "root"
	if settable_root_name:
		root_name = installer.getValue('SuperUserLogin')
	
	cmd = 'ProfileInstall --super-user %s /tmp/%s %s'%(root_name, profileName, destMountPoint)
	safeRun(cmd, 'ProfileGen', 1, logger)

	###############################################################################
	# Now that ProfileInstall created the filesystem tree, prepare the bind mounts
	diskutil.mountPseudoFS(destMountPoint)


	############################################################################
	# Create Options file...
	log('Creating "BootOptions" file...')

	def generateOptionsFile() :
		global consoleFont
	
		comments = {}
		comments['BootTheme'] = '#BootTheme=AppleII\n#BootTheme=CheckList\n#BootTheme=Hat\n#BootTheme=Progress\n#BootTheme=Progress-II\n#BootTheme=Progress-III\n#BootTheme=Quotes\n#BootTheme=ScanDisk\n#BootTheme=Slack\n#BootTheme=SplitScreen'
		comments['ClockMode'] = '#ClockMode=GMT\n#ClockMode=LocalTime'

		comments['KeymapLayout'] = '#KeymapLayout=br-abnt2\n#KeymapLayout=us\n#KeymapLayout=dvorak.map'
		#comments['MouseDevice']  = '#MouseType=ps2\n#MouseType=imps2\n#MouseType=ms'
		#comments['MouseType']    = '#MouseDevice=/dev/misc/psaux\n#MouseDevice=/dev/tts/0'

		comments['Modules'] = """
# If you need to load a module on boot, use the array below.
# However, be warned that the correct way to load modules
# is using the load-on-demand facilities of /etc/modprobe.conf.
# For example: to set the module for your network card, you
# only need to add a line like
#     alias eth0 via-rhine
# to /etc/modprobe.conf. To load your ALSA sound module, use
#     alias sound-slot-0 snd-via82xx
# (replacing the module names above by those that match your
# hardware, of course).
"""

		o = ''
		if (installer.getValue('HostName')) :
			o += 'HostName' + '=' + installer.getValue('HostName') + '\n\n'
		else :
			o += comments['HostName'] + '\n\n'

		# clockmode is a special case...
		o += comments['ClockMode'] + '\n'
		if (installer.getValue('ClockMode')) :
			if str(installer.getValue('ClockMode')[1]) == 'GMT' :
				o += 'ClockMode=GMT' + '\n\n'
			else :
				o += 'ClockMode=LocalTime' + '\n\n'

		o += comments['BootTheme'] + '\n'
		if (installer.getValue('BootTheme')) :
			o += 'BootTheme' + '=' + str(installer.getValue('BootTheme')[1]) + '\n'

		o += '\n'
		o += comments['KeymapLayout'] + '\n'
		if (installer.getValue('KeymapLayout')) :
			o += 'KeymapLayout' + '=' + str(installer.getValue('KeymapLayout')[1])+'.map' + '\n'
		o += '\n'

		mouseLines = MouseInfo.getMouseOptions('BootOptions')
		o += mouseLines
		o += 'ConsoleFont=' + consoleFont + '\n'
		o += comments['Modules']
		# Make sure users have a /dev/dsp by default, and that they're allowed to remove it if they want/need. 
		o += 'UserDefinedModules=(\n   fuse\n   snd-pcm-oss\n   snd-mixer-oss\n)\n'
		o += '\n'

		safeWriteToFile(destMountPoint+'/Programs/BootScripts/Settings/BootOptions', o, logger)

	generateOptionsFile()

	############################################################################
	# Put hostname inside /etc/hosts
	log(tr('Creating /System/Settings/hosts...'))
	o = '127.0.0.1 localhost.localdomain localhost %s\n'%installer.getValue('HostName')
	safeWriteToFile(destMountPoint+'/System/Settings/hosts', o, logger)

	############################################################################
	# Put DNS inside /etc/resolv.conf
	log(tr('Creating /System/Settings/resolv.conf...'))
	o = ''
	if installer.getValue('PrimaryDNS') :
		o += 'nameserver %s\n'%installer.getValue('PrimaryDNS')
	else :
		o += '# Domain name servers from OpenDNS.com\n'
		o += 'nameserver 208.67.222.222\n'

	if installer.getValue('SecondaryDNS') :
		o += 'nameserver %s\n'%installer.getValue('SecondaryDNS')
	else :
		o += 'nameserver 208.67.220.220\n'

	safeWriteToFile(destMountPoint+'/System/Settings/resolv.conf', o, logger)
	safeWriteToFile(destMountPoint+'/System/Settings/resolv.conf.tail', o, logger)

	genFstabParams = ''
	if installer.getValue('SwapFile') == 1 :
		swapFileName = '/Data/Variable/swap'
		genFstabParams += ' --swap-file '+swapFileName
		size = int(installer.getValue('SwapSize'))
		safeRun('dd if=/dev/zero of=%s%s bs=1M count=%d'%(destMountPoint,swapFileName,size))
		safeRun('mkswap %s%s' %(destMountPoint,swapFileName))

	############################################################################
	# Create fstab
	log(tr('Generating /System/Settings/fstab...'))
	bootloaderTarget = installer.getValue('BootloaderTarget')[1].split()[0]

	espParams = ""
	if installer.getValue('InstallBootloader') and platform.pureEFI() :
	    espParams = "--esp /dev/%s" %(os.path.basename(bootloaderTarget))
	    safeRun('mkdir -p %s/System/Kernel/ESP' %destMountPoint)

	cmd = 'GenFstab %s %s > %s/System/Settings/fstab'%(espParams, genFstabParams,destMountPoint)
	safeRun(cmd, 'fstab generation', 0, logger)

	lines = safeFileReadLines(destMountPoint+'/System/Settings/fstab', logger)
	lines = [x for x in lines if x and x[0] != '#' and x.find('/Mount/') > -1]
	mountList = [x.split()[1] for x in lines]
	for m in mountList :
		if reallyInstall :
			if not os.access(destMountPoint+m, os.F_OK) :
				os.mkdir(destMountPoint+m)
		else :
			print('mkdir '+destMountPoint+m)

	############################################################################
	# Create inittab
	safeRun('chroot '+destMountPoint+' ln -sfn /Programs/BootScripts/Settings/inittab /System/Settings/inittab', 'inittab', 0, logger)

	############################################################################
	# Set superuser password
	log(tr('Setting superuser login and password...'))
	if installer.getValue('SuperUserPassword') == installer.getValue('SuperUserPasswordRetyped') :
		shadowLines = safeFileReadLines(destMountPoint+'/System/Settings/shadow', logger)

		index = 0
		for i, line in enumerate(shadowLines) :
			if line.find('gobo') > -1 :
				index = i

		goboLine = shadowLines[index]
		goboLineList = goboLine.split(':')

		goboLogin = root_name
		goboLineList[0] = goboLogin

		goboOldPassword = goboLineList[1]
		uncriptedNewPassword = installer.getValue('SuperUserPassword')
		salt = goboOldPassword[:2]
		criptedNewPassword = crypt.crypt(uncriptedNewPassword, salt)
		goboLineList[1] = criptedNewPassword
		goboLine = ":".join(goboLineList)

		shadowLines[index] = goboLine
		o = "\n".join(shadowLines)
		safeWriteToFile(destMountPoint+'/System/Settings/shadow', o, logger)

		cmd = 'chroot %s GrepReplace "gobo" "%s" /etc/passwd /etc/group /Programs/Sudo/Settings/sudoers'%(destMountPoint,goboLogin)
		safeRun(cmd, '', 0, logger)

		cmd = 'chroot %s rm -f /etc/passwd~ /etc/group~ /Programs/Sudo/Settings/sudoers~'%destMountPoint
		safeRun(cmd, '', 0, logger)

	else :
		print('Warning: keeping default superuser password: "gobo" (passwords typed do not match)')
		salt = 'LE'

	############################################################################
	# Create regular users with AddUser
	log(tr('Creating user accounts...'))
	for login in list(addedUsers.keys()) :
		log(tr('Creating account for user %s...')%str(login))
		cmd = 'chroot %s AddUser'%destMountPoint
		cmd = cmd + ' -f "'+addedUsers[login]['FullName'].strip()+'" '
		cmd = cmd + ' -p '+ crypt.crypt(addedUsers[login]['Password'], salt)
		cmd = cmd + ' --skel'
		cmd = cmd + ' ' + login
		safeRun(cmd, '', 0, logger)

		cmd = 'chroot %s rm -f /Users/%s/Desktop/Manager.desktop'%(destMountPoint,login)
		safeRun(cmd, '', 0, logger)

		if addedUsers[login]['NewUserEnableSudo'] :
			cmd = 'chroot %s usermod -aG sys,lpadmin %s'%(destMountPoint,login)
			safeRun(cmd, '', 0, logger)

	############################################################################
	# Set Default Language on Bootscripts Env file
	log(tr('Setting default locale settings...'))

	o = 'export LANG=%s.UTF-8\nexport LC_ALL=%s.UTF-8\n'%(lang,lang)

	safeWriteToFile(destMountPoint+'/Programs/BootScripts/Current/Resources/Environment', o, logger)
	safeRun('chroot '+destMountPoint+' SymlinkProgram BootScripts', 'LANG', 0, logger)

	############################################################################
	# Propagate changes made to .xinitrc and .Xresources
	for login in list(addedUsers.keys()) + [root_name]:
		for rcfile in ['.xinitrc', '.Xresources']:
			if os.path.exists('/Users/%s/%s' %(root_name, rcfile)):
				cmd = 'cp /Users/%s/%s %s/Users/%s/' %(root_name, rcfile, destMountPoint, login)
				safeRun(cmd, 'copy %s' %rcfile, 0, logger)
				cmd = 'chroot %s chown %s /Users/%s/%s'%(destMountPoint, login, login, rcfile)
				safeRun(cmd, '', 0, logger)

	############################################################################
	# Zoneinfo
	log(tr('Setting zoneinfo...'))
	zoneinfo = installer.getValue('ZoneInfo')[1].replace(' ','_')
	safeRun('chroot '+destMountPoint+' ln -sfn /System/Index/share/zoneinfo/%s /Programs/Glibc/Settings/localtime' %zoneinfo, 'zoneinfo', 0, logger)
	safeRun('chroot '+destMountPoint+' ln -sfn /System/Index/share/zoneinfo/%s /System/Settings/localtime' %zoneinfo, 'zoneinfo', 0, logger)

	############################################################################
	# makewhatis
	try :
		if os.access(destMountPoint+'/Programs/Man', os.F_OK) :
			log(tr('Creating "whatis" database...'))
			cmd = 'chroot %s makewhatis -w'%destMountPoint
			safeRun(cmd)
	except :
		log(tr('Error creating "whatis" database.'))
	
	############################################################################
 	# Create lilo.conf...
	bootloader = BootLoader(bootloaderTarget, rootPartition, destMountPoint, logger, reallyInstall)

	installLilo = 'LILO' in [x.split()[0] for x in installer.getValue('Packages')[1]]
	try :
		if installLilo :
			log(tr('Generating LILO "lilo.conf" file...'))
			bootloader.createLiloConfig()
	except :
		log('Error creating lilo.conf file')

	############################################################################
	# Configure bootloaders
	log(tr('Creating GRUB config file'))
	if installer.getValue('InstallBootloader') and platform.pureEFI() :
		log(tr('Installing EFI application on %s' %bootloaderTarget))
		diskutil.mount(os.path.basename(bootloaderTarget), destMountPoint+'/System/Kernel/ESP')
		bootloader.createGrubConfig('/System/Kernel/ESP/grub')
		bootloader.createEFIConfig('/System/Kernel/ESP', '/System/Kernel/ESP')
		diskutil.unmount(os.path.basename(bootloaderTarget), destMountPoint+'/System/Kernel/ESP')
	elif installer.getValue('InstallBootloader') :
		log(tr('Installing GRUB'))
		bootloader.installGrub()
		bootloader.createGrubConfig('/boot/grub')

	############################################################################
	# Make /System/Settings/mtab a symlink to /proc/mounts
	if os.path.exists(destMountPoint+"/etc/mtab"):
		os.unlink(destMountPoint+"/etc/mtab")
	os.symlink("/proc/mounts", destMountPoint+"/etc/mtab")

	############################################################################
	# Unmounting mount point
	diskutil.unmountPseudoFS(destMountPoint)
	diskutil.unmount(rootPartition, destMountPoint)
	
	############################################################################
	# Done message
	log(tr("That's it!"))
	log(tr("You should now be able to reboot and enjoy the GoboLinux experience. :)"))

	if not reallyInstall :
		log(tr('Warning: wizard was run in test mode.'))
		log(tr('Run "GoboLinuxInstaller [qt|curses] install" to perform installation.'))

	if logger :
		logger.enableOk()

def RunInstallation():
	try:
		_RunInstallation()
	except Exception as inst :
		x = '\033[1;31mGoboLinux installation failed.'+'\n'+'Check /tmp/GoboLinuxInstall.log.\033[0m'
		y = 'Error: '+str(inst)
		print(x)
		print(y)
		if logger :
			logger.append(x)
			logger.append(y)
			logger.enableOk()

if mode == 'qt' :
	from GraphicalTail import *
	logger = GraphicalTail()

	x = threading.Thread()
	x.run = RunInstallation
	x.start()

	logger.exec_()

else :
	# with curses, printing to stdout is enough
	logger = None
	RunInstallation()
